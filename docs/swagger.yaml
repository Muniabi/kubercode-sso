basePath: /api/v1
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.ChangeEmailRequest:
    properties:
      newEmail:
        type: string
      password:
        type: string
    required:
    - newEmail
    - password
    type: object
  models.ChangePasswordRequest:
    properties:
      newPassword:
        minLength: 8
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  models.LoginRequest:
    properties:
      deviceToken:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - deviceToken
    - email
    - password
    type: object
  models.OTPRequest:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  models.OTPResponse:
    properties:
      status:
        type: boolean
    type: object
  models.RestorePasswordRequest:
    properties:
      email:
        type: string
      newPassword:
        minLength: 8
        type: string
    required:
    - email
    - newPassword
    type: object
  models.SignUpRequest:
    properties:
      deviceToken:
        type: string
      email:
        type: string
      isMentor:
        type: boolean
      password:
        minLength: 8
        type: string
    required:
    - deviceToken
    - email
    - password
    type: object
  models.TokenResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  models.VerifyTokenResponse:
    properties:
      accountId:
        type: string
      status:
        type: boolean
    type: object
host: localhost:1488
info:
  contact:
    email: support@kubercode.com
    name: API Support
    url: http://www.swagger.io/support
  description: Микросервис аутентификации и авторизации KuberCode SSO.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: KuberCode SSO API
  version: "1.0"
paths:
  /auth/change-email:
    post:
      consumes:
      - application/json
      description: Изменяет email пользователя
      parameters:
      - description: Данные для смены email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangeEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Изменение email
      tags:
      - auth
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Изменяет пароль пользователя
      parameters:
      - description: Данные для смены пароля
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Изменение пароля
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает токены
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Вход в систему
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Выходит пользователя из системы и инвалидирует токены
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Выход из системы
      tags:
      - auth
  /auth/logout-all:
    post:
      consumes:
      - application/json
      description: Выходит пользователя со всех устройств
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Выход со всех устройств
      tags:
      - auth
  /auth/otp/send:
    post:
      consumes:
      - application/json
      description: Отправляет OTP код на email пользователя
      parameters:
      - description: Email для отправки OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Отправка OTP
      tags:
      - auth
  /auth/otp/verify:
    post:
      consumes:
      - application/json
      description: Проверяет OTP код
      parameters:
      - description: OTP код
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Проверка OTP
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет access token используя refresh token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Обновление токена
      tags:
      - auth
  /auth/restore-password:
    post:
      consumes:
      - application/json
      description: Восстанавливает пароль пользователя
      parameters:
      - description: Данные для восстановления пароля
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RestorePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Восстановление пароля
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя в системе
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Регистрация нового пользователя
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Проверяет валидность JWT токена
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VerifyTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Проверка токена
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
